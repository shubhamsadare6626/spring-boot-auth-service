{
  "openapi": "3.0.3",
  "info": {
    "title": "User API",
    "version": "1.0",
    "description": "API documentation for user management."
  },
  "servers": [
    {
      "url": "http://localhost:8085",
      "description": "User Management API"
    }
  ],
  "paths": {
    "/api/users": {
      "get": {
        "summary": "Get all users",
        "description": "Retrieves a list of all users.",
        "operationId": "getAllUsers",
        "tags": [
          "User"
        ],
        "responses": {
          "200": {
            "description": "A list of users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalExceptionDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new user",
        "description": "Creates a new user with the provided information.",
        "operationId": "createUser",
        "tags": [
          "User"
        ],
        "requestBody": {
          "description": "User object to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "UserDto created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "applicatio65.0.109.192n/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalExceptionDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{id}": {
      "get": {
        "summary": "Get user by ID",
        "description": "Retrieves a user by their unique ID.",
        "operationId": "getUserById",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "User Id to fetch User details",
              "example": "a1b2c3d4-e5f6-7890-gh12-ij5l34567890"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalExceptionDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update user by ID",
        "description": "Updates an existing user with the provided information.",
        "operationId": "updateUser",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the user to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Updated user details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete user by ID",
        "description": "Deletes a user by their unique ID.",
        "operationId": "deleteUser",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the user to delete",
            "schema": {
              "type": "string",
              "example": "a1b2c3d4-e5f6-7890-gh12-ij5l34567890"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalExceptionDto"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "UserDto": {
        "type": "object",
        "required": [
          "username",
          "email",
          "password",
          "streetAddress"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": "f47ac10b-58cc-4372-a567-0e02b2c3d479"
          },
          "username": {
            "type": "string",
            "example": "alice1",
            "minLength": 4,
            "maxLength": 8
          },
          "firstname": {
            "type": "string",
            "example": "Alice"
          },
          "lastname": {
            "type": "string",
            "example": "Johnson"
          },
          "email": {
            "type": "string",
            "format": "email",
            "pattern": "^[\\w\\.-]+@[a-zA-Z\\d\\.-]+\\.[a-zA-Z]{2,}$",
            "example": "alice@example.com"
          },
          "mobileNumber": {
            "type": "string",
            "example": "9876543210"
          },
          "streetAddress": {
            "type": "string",
            "example": "456 Oak Street"
          },
          "migrated": {
            "type": "boolean",
            "default": true
          },
          "age": {
            "type": "integer",
            "minimum": 18,
            "maximum": 40
          },
          "password": {
            "type": "string",
            "x-field-extra-annotation": "@com.fasterxml.jackson.annotation.JsonIgnore",
            "minLength": 6,
            "description": "The user's password, must be at least 8 characters long.",
            "pattern": "^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$",
            "example": "Nisha@1234"
          }
        }
      },
      "GlobalExceptionDto": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "Error occurred timestamp",
            "example": "2024-11-22T05:14:09.138+00:00"
          },
          "status": {
            "type": "integer",
            "description": "Error code Issue",
            "example": 500
          },
          "message": {
            "type": "string",
            "description": "Error message describes issue",
            "example": "Internal server Error"
          },
          "path": {
            "type": "string",
            "description": "Error occurred on endpoint path",
            "example": "/api/v1/users"
          },
          "error": {
            "type": "string",
            "example": "Unhandled Exception occurred while performing operation"
          }
        }
      },
      "ValidationError": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "example": 400
          },
          "message": {
            "type": "string",
            "example": "Validation failed for Request data"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "SuccessDto": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "User Deleted Successfully.."
          },
          "timestamp": {
            "type": "string",
            "description": "Error occurred timestamp",
            "example": "2024-11-22T05:14:09.138+00:00"
          },
          "status": {
            "type": "integer",
            "description": "Error code Issue",
            "example": 200
          }
        }
      }
    }
  }
}