/*
 * User API
 * API documentation for user management.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UserDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-15T18:08:36.443415824+05:30[Asia/Kolkata]")
public class UserDto {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Object id = null;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private Object username = null;

  public static final String SERIALIZED_NAME_FIRSTNAME = "firstname";
  @SerializedName(SERIALIZED_NAME_FIRSTNAME)
  private Object firstname = null;

  public static final String SERIALIZED_NAME_LASTNAME = "lastname";
  @SerializedName(SERIALIZED_NAME_LASTNAME)
  private Object lastname = null;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private Object email = null;

  public static final String SERIALIZED_NAME_MOBILE_NUMBER = "mobileNumber";
  @SerializedName(SERIALIZED_NAME_MOBILE_NUMBER)
  private Object mobileNumber = null;

  public static final String SERIALIZED_NAME_STREET_ADDRESS = "streetAddress";
  @SerializedName(SERIALIZED_NAME_STREET_ADDRESS)
  private Object streetAddress = null;

  public static final String SERIALIZED_NAME_MIGRATED = "migrated";
  @SerializedName(SERIALIZED_NAME_MIGRATED)
  private Object migrated = false;

  public static final String SERIALIZED_NAME_AGE = "age";
  @SerializedName(SERIALIZED_NAME_AGE)
  private Object age = null;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private Object password = null;

  public UserDto() {
  }

  public UserDto id(Object id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public Object getId() {
    return id;
  }


  public void setId(Object id) {
    this.id = id;
  }


  public UserDto username(Object username) {
    
    this.username = username;
    return this;
  }

   /**
   * Get username
   * @return username
  **/
  @javax.annotation.Nullable
  public Object getUsername() {
    return username;
  }


  public void setUsername(Object username) {
    this.username = username;
  }


  public UserDto firstname(Object firstname) {
    
    this.firstname = firstname;
    return this;
  }

   /**
   * Get firstname
   * @return firstname
  **/
  @javax.annotation.Nullable
  public Object getFirstname() {
    return firstname;
  }


  public void setFirstname(Object firstname) {
    this.firstname = firstname;
  }


  public UserDto lastname(Object lastname) {
    
    this.lastname = lastname;
    return this;
  }

   /**
   * Get lastname
   * @return lastname
  **/
  @javax.annotation.Nullable
  public Object getLastname() {
    return lastname;
  }


  public void setLastname(Object lastname) {
    this.lastname = lastname;
  }


  public UserDto email(Object email) {
    
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @javax.annotation.Nullable
  public Object getEmail() {
    return email;
  }


  public void setEmail(Object email) {
    this.email = email;
  }


  public UserDto mobileNumber(Object mobileNumber) {
    
    this.mobileNumber = mobileNumber;
    return this;
  }

   /**
   * Get mobileNumber
   * @return mobileNumber
  **/
  @javax.annotation.Nullable
  public Object getMobileNumber() {
    return mobileNumber;
  }


  public void setMobileNumber(Object mobileNumber) {
    this.mobileNumber = mobileNumber;
  }


  public UserDto streetAddress(Object streetAddress) {
    
    this.streetAddress = streetAddress;
    return this;
  }

   /**
   * Get streetAddress
   * @return streetAddress
  **/
  @javax.annotation.Nullable
  public Object getStreetAddress() {
    return streetAddress;
  }


  public void setStreetAddress(Object streetAddress) {
    this.streetAddress = streetAddress;
  }


  public UserDto migrated(Object migrated) {
    
    this.migrated = migrated;
    return this;
  }

   /**
   * Get migrated
   * @return migrated
  **/
  @javax.annotation.Nullable
  public Object getMigrated() {
    return migrated;
  }


  public void setMigrated(Object migrated) {
    this.migrated = migrated;
  }


  public UserDto age(Object age) {
    
    this.age = age;
    return this;
  }

   /**
   * Get age
   * minimum: 18
   * maximum: 40
   * @return age
  **/
  @javax.annotation.Nullable
  public Object getAge() {
    return age;
  }


  public void setAge(Object age) {
    this.age = age;
  }


  public UserDto password(Object password) {
    
    this.password = password;
    return this;
  }

   /**
   * The user&#39;s password, must be at least 8 characters long.
   * @return password
  **/
  @javax.annotation.Nullable
  public Object getPassword() {
    return password;
  }


  public void setPassword(Object password) {
    this.password = password;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserDto userDto = (UserDto) o;
    return Objects.equals(this.id, userDto.id) &&
        Objects.equals(this.username, userDto.username) &&
        Objects.equals(this.firstname, userDto.firstname) &&
        Objects.equals(this.lastname, userDto.lastname) &&
        Objects.equals(this.email, userDto.email) &&
        Objects.equals(this.mobileNumber, userDto.mobileNumber) &&
        Objects.equals(this.streetAddress, userDto.streetAddress) &&
        Objects.equals(this.migrated, userDto.migrated) &&
        Objects.equals(this.age, userDto.age) &&
        Objects.equals(this.password, userDto.password);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, username, firstname, lastname, email, mobileNumber, streetAddress, migrated, age, password);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    firstname: ").append(toIndentedString(firstname)).append("\n");
    sb.append("    lastname: ").append(toIndentedString(lastname)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    mobileNumber: ").append(toIndentedString(mobileNumber)).append("\n");
    sb.append("    streetAddress: ").append(toIndentedString(streetAddress)).append("\n");
    sb.append("    migrated: ").append(toIndentedString(migrated)).append("\n");
    sb.append("    age: ").append(toIndentedString(age)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("username");
    openapiFields.add("firstname");
    openapiFields.add("lastname");
    openapiFields.add("email");
    openapiFields.add("mobileNumber");
    openapiFields.add("streetAddress");
    openapiFields.add("migrated");
    openapiFields.add("age");
    openapiFields.add("password");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("username");
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("streetAddress");
    openapiRequiredFields.add("password");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UserDto
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!UserDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserDto is not found in the empty JSON string", UserDto.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!UserDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserDto` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UserDto.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserDto.class));

       return (TypeAdapter<T>) new TypeAdapter<UserDto>() {
           @Override
           public void write(JsonWriter out, UserDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserDto read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UserDto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UserDto
  * @throws IOException if the JSON string is invalid with respect to UserDto
  */
  public static UserDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserDto.class);
  }

 /**
  * Convert an instance of UserDto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

