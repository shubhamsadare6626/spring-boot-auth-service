openapi: 3.1.0
info:
  description: API documentation for user management.
  title: User API
  version: "1.0"
servers:
- description: User Management API
  url: http://localhost:8085
paths:
  /api/users:
    get:
      description: Retrieves a list of all users.
      operationId: getAllUsers
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserDto'
          description: A list of users
      summary: Get all users
      tags:
      - User
      x-accepts: application/json
    post:
      description: Creates a new user with the provided information.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
        description: User object to be created
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
          description: UserDto created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Validation error
      summary: Create a new user
      tags:
      - User
      x-content-type: application/json
      x-accepts: application/json
  /api/users/{id}:
    delete:
      description: Deletes a user by their unique ID.
      operationId: deleteUser
      parameters:
      - description: ID of the user to delete
        explode: false
        in: path
        name: id
        required: true
        schema: {}
        style: simple
      responses:
        "204":
          description: User deleted successfully
        "404":
          description: User not found
      summary: Delete user by ID
      tags:
      - User
      x-accepts: application/json
    get:
      description: Retrieves a user by their unique ID.
      operationId: getUserById
      parameters:
      - description: ID of the user to retrieve
        explode: false
        in: path
        name: id
        required: true
        schema: {}
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
          description: User found
        "404":
          description: User not found
      summary: Get user by ID
      tags:
      - User
      x-accepts: application/json
    put:
      description: Updates an existing user with the provided information.
      operationId: updateUser
      parameters:
      - description: ID of the user to update
        explode: false
        in: path
        name: id
        required: true
        schema: {}
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
        description: Updated user details
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
          description: User updated successfully
        "404":
          description: User not found
      summary: Update user by ID
      tags:
      - User
      x-content-type: application/json
      x-accepts: application/json
components:
  schemas:
    UserDto:
      example:
        firstname: Alice
        password: Shubham@123
        streetAddress: 456 Oak Street
        mobileNumber: "9876543210"
        id: f47ac10b-58cc-4372-a567-0e02b2c3d479
        migrated: ""
        email: alice.johnson@example.com
        age: ""
        username: alice123
        lastname: Johnson
      properties:
        id:
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        username:
          example: alice123
          maxLength: 6
          minLength: 4
        firstname:
          example: Alice
        lastname:
          example: Johnson
        email:
          example: alice.johnson@example.com
          format: email
          pattern: "^[\\w\\.-]+@[a-zA-Z\\d\\.-]+\\.[a-zA-Z]{2,}$"
        mobileNumber:
          example: "9876543210"
        streetAddress:
          example: 456 Oak Street
        migrated:
          default: false
        age:
          maximum: 40
          minimum: 18
        password:
          description: "The user's password, must be at least 8 characters long."
          example: Shubham@123
          minLength: 6
          pattern: "^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$"
      required:
      - email
      - password
      - streetAddress
      - username
    ValidationError:
      properties:
        field:
          example: email
        message:
          example: "must match '^[\\w.-]+@[a-zA-Z\\d.-]+\\.[a-zA-Z]{2,}$'"
    ErrorResponse:
      properties:
        status:
          example: 400
        message:
          example: Validation failed for request data
        errors:
          items:
            $ref: '#/components/schemas/ValidationError'

